version: "4.0"

services:
  # VPN (NordVPN)
  vpn:
    # image: ghcr.io/bubuntux/nordvpn:v3.9.5-1
    image: ghcr.io/bubuntux/nordvpn:latest
    container_name: vpn
#    hostname: vpn # doesnt work
    restart: always
    devices:
      - /dev/net/tun
    ulimits: # set these to unlimited
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - NET_ADMIN # Required
      - NET_RAW # Required
    environment:
      # Review https://github.com/bubuntux/nordvpn#environment-variables
      - TOKEN=${VPN_TOKEN}
      - CONNECT=${VPN_CONNECT_LOCATION}
      - TECHNOLOGY=NordLynx
      - NETWORK=${SUBNET}
    ports:
      - ${QBT_WEB_PORT}:${QBT_WEB_PORT} # QBT_WEB_PORT
      - ${QBT_TORRENTING_PORT}:${QBT_TORRENTING_PORT} # QBT_TORRENTING_PORT
      - ${QBT_TORRENTING_PORT}:${QBT_TORRENTING_PORT}/udp # QBT_TORRENTING_PORT_UDP
#    sysctls:
#      - net.ipv6.conf.all.disable_ipv6=1 # Recomended if using ipv4 only

  # Torrent Client
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: always
    network_mode: service:vpn
    depends_on:
      - vpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=${QBT_WEB_PORT} # Default 8080
      - TORRENTING_PORT=${QBT_TORRENTING_PORT} # Default 6881
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/qbt:/config

      # Location to put downloads in
      - ${DRIVEPOOL}/data2/downloads:/downloads
      - ${DRIVEPOOL}/data2/downloads/downloading:/downloads
      - ${DRIVEPOOL}/data2/downloads/torrent_files:/torrent_files
      # For manual moving... requires a reference below
      - ${DRIVEPOOL}/data/media/movies:/movies
      - ${DRIVEPOOL}/data/media/tvshows:/tvshows
      # - ${DRIVE_2}/data2/media/movies2:/movies2
      # - ${DRIVE_2}/data2/media/tvshows2:/tvshows2

  # NZB Client
  # Apparently no VPN is required, since its all SSL encrpyted...
  # sabnzbd:
  #   image: lscr.io/linuxserver/sabnzbd:latest
  #   container_name: sabnzbd
  #   restart: unless-stopped
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${DRIVEPOOL}/config/sabnzbd:/config
  #     - ${DRIVEPOOL}/data/downloads:/downloads
  #     - ${DRIVEPOOL}/data/downloads/incomplete:/downloads/incomplete
  #   ports:
  #     - ${NZB_CLIENT_PORT}:${NZB_CLIENT_PORT}

  # Indexer
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    ports:
      - ${PROWLARR_PORT}:${PROWLARR_PORT} # 9696
    volumes:
      - ${DRIVEPOOL}/config/prowlarr:/config

  # Movies
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/radarr:/config
      - ${DRIVEPOOL}/data:/data # drive 1
      # - ${DRIVE_2}/data2:/data2 # drive 2
    ports:
      - ${RADARR_PORT}:${RADARR_PORT} # Default 7878

  # TV Shows
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/sonarr:/config
      - ${DRIVEPOOL}/data:/data # drive 1
      # - ${DRIVE_2}/data2:/data2 # drive 2
    ports:
      - ${SONARR_PORT}:${SONARR_PORT} # Default 8989

  # Music
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    hostname: lidarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/lidarr:/config
      - ${DRIVEPOOL}/data:/data # drive 1
      # - ${DRIVE_2}/data2:/data2 # drive 2
    ports:
      - ${LIDARR_PORT}:${LIDARR_PORT} # Default 8686

  # Books
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    hostname: readarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/readarr:/config
      - ${DRIVEPOOL}/data:/data # drive 1
      # - ${DRIVE_2}/data2:/data2 # drive 2
    ports:
      - ${READARR_PORT}:${READARR_PORT} # Default 8787

  # Subtitles
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    hostname: bazarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/bazarr:/config
      - ${DRIVEPOOL}/data:/data # drive 1
      # - ${DRIVE_2}/data2:/data2 # drive 2
    ports:
      - ${BAZARR_PORT}:${BAZARR_PORT} # Default 6767

  # Media Request Manager
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/overseerr:/config
      - ${DRIVEPOOL}/data:/data # drive 1
      # - ${DRIVE_2}/data2:/data2 # drive 2
    ports:
      - ${OVERSEERR_PORT}:${OVERSEERR_PORT} # Default 5055

  # Discord Request Bot
  requestrr:
    image: lscr.io/linuxserver/requestrr:latest
    container_name: requestrr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/requestrr:/config
    ports:
      - ${REQUESTRR_PORT}:${REQUESTRR_PORT} # Default 4545

  # Alternative to Plex (Open Source, Free!)
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    hostname: jellyfin
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/jellyfin:/config
      - ${DRIVEPOOL}/config/jellyfin/cache:/cache
      - ${DRIVEPOOL}/data:/data
      - ${DRIVEPOOL}/data/media/movies:/movies
      - ${DRIVEPOOL}/data/media/tvshows/:/tvshows
      - ${DRIVEPOOL}/data/media/anime:/anime
      - ${DRIVEPOOL}/data/media/music:/music
      - ${DRIVEPOOL}/data/media/books:/books
    ports:
      - ${JELLYFIN_PORT}:${JELLYFIN_PORT} # Default 8096
    devices:
      - /dev/dri:/dev/dri

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    network_mode: host
    environment:
      - HOSTNAME=plex
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - PLEX_CLAIM=${PLEX_CLAIM_ID}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/plex:/config
#      - ${DRIVEPOOL}/config/plex/transcode:/transcode # don't use this, it's slower
      - /tmp/transcode:/transcode # use local drive not HDD/External drives!
      # Drive 1
      - ${DRIVEPOOL}/data:/data
      - ${DRIVEPOOL}/data/media/movies:/movies
      - ${DRIVEPOOL}/data/media/tvshows:/tvshows
      - ${DRIVEPOOL}/data/media/anime:/anime
      - ${DRIVEPOOL}/data/media/music:/music
      - ${DRIVEPOOL}/data/media/books:/books
      # Drive 2
      # - ${DRIVE_2}/data2:/data2
      # - ${DRIVE_2}/data2/media/movies2:/movies2
      # - ${DRIVE_2}/data2/media/tvshows2:/tvshows2
      # - ${DRIVE_2}/data2/media/anime2:/anime2
      # - ${DRIVE_2}/data2/media/music2:/music2
      # - ${DRIVE_2}/data2/media/books2:/books2
    devices:
      - /dev/dri:/dev/dri

  # Plex Analyzer
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK=002
    volumes:
      - ${DRIVEPOOL}/config/tautulli:/config
    ports:
      - ${TAUTULLI_PORT}:${TAUTULLI_PORT} # Default 8181

# Proxy Server to Bypass Cloudflare Protection
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TIMEZONE}
    ports:
      - ${FLARESOLVERR_PORT}:${FLARESOLVERR_PORT} # Default 8191

# Portainer
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - ${PORTAINER_PORT}:${PORTAINER_PORT} # Default 9443
    volumes:
      - ${DRIVEPOOL}/config/portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

# tdarr - convert and transcode videos
#   tdarr:
#     container_name: tdarr
#     image: ghcr.io/haveagitgat/tdarr:latest
#     restart: unless-stopped
#     # network_mode: bridge
#     ports:
#       - ${TDARR_WEBUI_PORT}:${TDARR_WEBUI_PORT} # Default 8265
#       - ${TDARR_SERVER_PORT}:${TDARR_SERVER_PORT} # Default 8266
#     environment:
#       - PUID=${PUID}
#       - PGID=${PGID}
#       - TZ=${TIMEZONE}
#       - UMASK_SET=002
#       - serverIP=0.0.0.0 # Localhost loopback (or a server IP!)
#       - serverPort=${TDARR_SERVER_PORT}
#       - webUIPort=${TDARR_WEBUI_PORT}
#       - internalNode=true
#       - inContainer=true
#       - nodeName=MyInternalNode
#     volumes:
#       - ${DRIVEPOOL}/config/tdarr/server:/app/server
#       - ${DRIVEPOOL}/config/tdarr/configs:/app/configs
#       - ${DRIVEPOOL}/config/tdarr/logs:/app/logs
#       - ${DRIVEPOOL}/data:/data1
      # - ${DRIVE_2}/data2:/data2
#       - /tmp/tdarr_transcode_cache:/temp # put this on an SSD, not your storage though
#     devices:
#       - /dev/dri:/dev/dri

# # tdarr-node required. Tdarr container calls this sucker
#   tdarr-node:
#     container_name: tdarr-node
#     image: ghcr.io/haveagitgat/tdarr_node:latest
#     restart: unless-stopped
#     network_mode: service:tdarr
#     environment:
#       - PUID=${PUID}
#       - PGID=${PGID}
#       - TZ=${TIMEZONE}
#       - UMASK_SET=002
#       - nodeName=MyExternalNode
#       - serverIP=0.0.0.0 # Localhost loopback (or client IP!)
#       - serverPort=${TDARR_SERVER_PORT} # Default 8266
#       - inContainer=true
#     volumes:
#       - ${DRIVEPOOL}/config/tdarr/configs:/app/configs
#       - ${DRIVEPOOL}/config/tdarr/logs:/app/logs
#       - ${DRIVEPOOL}/data:/data1
#       - ${DRIVE_2}/data2:/data2
#       - /tmp/tdarr_transcode_cache:/temp # put this on an SSD/thumb, not your storage though
#     devices:
#       - /dev/dri:/dev/dri

# Network Wide Ad Blocking
#  pihole:
#    image: pihole/pihole:latest
#    container_name: pihole
#    restart: unless-stopped
#    network_mode: host
##    ports:
##      - 53:53/tcp
##      - 53:53/udp
##      - 8000:80/tcp
#    environment:
#      TZ: ${TIMEZONE}
#      WEBPASSWORD: ${PIHOLE_PW}
#    volumes:
#      - ${DRIVEPOOL}/config/pihole/etc-pihole:/etc/pihole
#      - ${DRIVEPOOL}/config/pihole/etc-dnsmasq.d:/etc/dnsmasq.d

# Netword Wide Ad Blocking Alternative
# https://github.com/AdguardTeam/AdGuardHome/issues/4283
# sudo mkdir /etc/systemd/resolved.conf.d
# cd /etc/systemd/resolved.conf.d
# sudo vim adguardhome.conf
# sudo mv /etc/resolv.conf /etc/resolv.conf.backup
# sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
# systemctl reload-or-restart systemd-resolved

# The adguardhome.conf file contains:
# [Resolve]
# DNS=127.0.0.1
# DNSStubListener=no

# finally, go to <ip>:3000 for setup.
  # adguardhome:
  #     container_name: adguardhome
  #     image: adguard/adguardhome
  #     restart: unless-stopped
  #     volumes:
  #         - ${DRIVEPOOL}/config/adguardhome/work:/opt/adguardhome/work\
  #         - ${DRIVEPOOL}/config/adguardhome/config:/opt/adguardhome/conf\
  #     ports:
  #         - 53:53/tcp
  #         - 53:53/udp
  #         - 67:67/udp
  #         - 68:68/udp
  #         - 80:80/tcp
  #         - 443:443/tcp
  #         - 443:443/udp
  #         - 3000:3000/tcp
  #         - 853:853/tcp
  #         - 853:853/udp
  #         - 5443:5443/tcp
  #         - 5443:5443/udp
  #         - 6060:6060/tcp


# Home Automation (no more google/alexa!)
  # homeassistant:
  #   container_name: homeassistant
  #   image: "ghcr.io/home-assistant/home-assistant:stable"
  #   volumes:
  #     - ${DRIVEPOOL}/config/home_assistant:/config # config dir
  #     - /etc/localtime:/etc/localtime:ro # time
  #     - /run/dbus:/run/dbus:ro # bluetooth
  #   restart: unless-stopped
  #   privileged: true
  #   # for network, use host, otherwise, use ports. 
  #   # If host mode, open firewall up, aka: sudo ufw allow 8123
  #   network_mode: host
  #   # ports:
  #   #   - ${HOMEASSISTANT_PORT}:${HOMEASSISTANT_PORT} # Default 8123
  #   environment:
  #     - TZ=${TIMEZONE}